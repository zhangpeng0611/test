#include <iostream>
#include <vector>
using namespace std;

/*
C++11使用下面两种独立的性质来区别类别：

拥有身份：指代某个非临时对象。
可被移动：可被右值引用类型匹配。
每个C++表达式只属于三种基本值类别中的一种：左值 (lvalue)、纯右值 (prvalue)、将亡值 (xvalue)

拥有身份且不可被移动的表达式被称作 左值 (lvalue) 表达式，指持久存在的对象或类型为左值引用类型的返还值。
不拥有身份且可被移动的表达式被称作 纯右值 (prvalue) 表达式，也就是指纯粹的临时值（即使指代的对象是持久存在的）。
不拥有身份且不可被移动的表达式无法使用。
将亡值（xvalue，eXpiring value） 是 C++11 引入的值类别（value category） 之一，用于描述那些即将被销毁
、其资源可以被移动（而非复制） 的对象。它是为了支持移动语义（move semantics） 而设计的，核心作用
是允许资源（如内存、文件句柄）在对象生命周期结束前被高效转移，避免不必要的复制开销。

左值（lvalue） 指持久存在（有变量名）的对象或返还值类型为左值引用的返还值，是不可移动的。
右值（rvalue） 包含了 将亡值、纯右值，是可移动（可被右值引用类型匹配）的值。

*/

/*
将亡值：
 函数返回的临时对象
函数返回的非引用类型对象是临时的，在表达式结束后会被销毁，属于将亡值
这里，create_string()返回的临时字符串是将亡值，std::string 的移动构造函数会被调用，
直接接管临时对象的内存，避免深拷贝
#include <string>

std::string create_string() {
    return "hello"; // 返回的临时字符串是将亡值
}

int main() {
    // 临时对象（将亡值）的资源被移动到 s，而非复制
    std::string s = create_string();
    return 0;
}

-----------------------------------------------------------
 被 std::move 转换的对象
std::move 本身不会移动任何数据，它的作用是将一个左值（lvalue） 强制转换为将亡值，告诉编译器：
“这个对象可以被移动，它的资源可以被窃取”

*/